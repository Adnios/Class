int horse66[36]={1,30,33,16,3,24,32,17,2,23,34,15,29,36,31,14,25,4,18,9,6,35,22,13,7,28,11,20,5,26,10,19,8,27,12,21};
int horse68[48]={1,10,31,40,21,14,29,38,32,41,2,11,30,39,22,13,9,48,33,20,15,12,37,28,42,3,44,47,6,25,18,23,45,8,5,
					34,19,16,27,36,4,43,46,7,26,35,24,17};
int horse88[64]={1,46,17,50,3,6,31,52,18,49,2,7,30,51,56,5,45,64,47,16,27,4,53,32,48,19,8,29,10,55,26,57,
                 63,44,11,22,15,28,33,54,12,41,20,9,36,23,58,25,43,62,39,14,21,60,37,34,40,13,42,61,38,35,24,59};
int horse810[80]={1,46,37,66,3,48,35,68,5,8,38,65,2,47,36,67,4,7,34,69,45,80,39,24,49,18,31,52,9,6,
                   64,23,44,21,30,15,50,19,70,33,79,40,25,14,17,20,53,32,51,10,26,63,22,43,54,29,16,73,58,71,
                   41,78,61,28,13,76,59,56,11,74,62,27,42,77,60,55,12,75,72,57};
int horse1010[100]={1,54,69,66,3,56,39,64,5,8,68,71,2,55,38,65,4,7,88,63,53,100,67,70,57,26,35,40,9,6,
                    72,75,52,27,42,37,58,87,62,89,99,30,73,44,25,34,41,36,59,10,74,51,76,31,28,43,86,81,90,61,
                    77,98,29,24,45,80,33,60,11,92,50,23,48,79,32,85,82,91,14,17,
                    97,78,21,84,95,46,19,16,93,12,22,49,96,47,20,83,94,13,18,15};
int horse1012[120]={1,4,119,100,65,6,69,102,71,8,75,104,118,99,2,5,68,101,42,7,28,103,72,9,3,120,97,64,41,66,25,70,39,74,105,76,
                     98,117,48,67,62,43,40,27,60,29,10,73,93,96,63,44,47,26,61,24,33,38,77,106,
                    116,51,94,49,20,23,46,37,30,59,34,11,95,92,115,52,45,54,21,32,35,80,107,78,
                    114,89,50,19,22,85,36,55,58,31,12,81,91,18,87,112,53,16,57,110,83,14,79,108,
                    88,113,90,17,86,111,84,15,56,109,82,13};
#include<stdio.h>
int dx[8] = {-1,-2,-2,-1,1,2, 2, 1};//马可以走的八种方向 
int dy[8] = {-2,-1, 1, 2,2,1,-1,-2}; 
int startx = 0;//起始坐标x 
int starty = 0;//起始坐标y
#define m 6//棋盘的行数 
#define n 6//棋盘的列数
int board[m][n];//m * n的棋盘
int judge(int x,int y)
{
	if(x < 0 || y < 0 || x >= m || y >= n  || board[x][y] != 0)
	{
		return 0;
	}
	return 1;
}
int restart(int x,int y)
{
	int i;
	for(i = 0;i < 8;i ++)
	{
		if(x + dx[i] == startx && y + dy[i] == starty)
		{
			return 1;
		}
	}
	return 0;
}
void backtrack(int x,int y,int count)
{
	int i;
	if(count == m * n && restart(x,y))
	{
		printf("hello\n");
		return;
	}
	for(i = 0;i < 8;i ++)//八个方向
	{
		int xx = x + dx[i];
		int yy = y + dy[i];
		if(judge(xx,yy))
		{
			board[xx][yy] = count + 1;
			backtrack(xx,yy,count + 1);
		} 
	}
	
}
int main()
{
	int i,j;
	for(i = 0;i < m;i ++)
	{
		for(j = 0;j < n;j ++)
		{
			board[i][j] = 0;
		}
	}
	board[0][0] = 1; 
	backtrack(0,0,1);
	for(i = 0;i < m;i ++)
	{
		for(j = 0;j < n;j ++)
		{
			printf("%3d",board[i][j]);
		}
		putchar('\n');
	}
	return 0;
 } 